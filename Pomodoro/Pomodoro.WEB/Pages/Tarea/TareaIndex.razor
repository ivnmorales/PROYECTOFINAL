@page "/tareas"
@using Pomodoro.Shared.Dtos
@using Pomodoro.WEB.Repositories
@inject IRepository repository
@inject SweetAlertService swal
@inject NavigationManager NavigationManager

@using Microsoft.AspNetCore.Authorization;
@* // Solo los usuarios con el rol 'Admin' pueden acceder a esta página *@
@attribute [Authorize(Roles = "Admin")]

<h3>Lista de Tareas</h3>

@if (tareas == null) // Si las tareas no han sido cargadas aún
{
    <div class="spinner" />
    // Muestra un spinner mientras se cargan los datos
}
else
{
    <div class="card">
        <!-- Contenedor de la tarjeta -->
        <div class="card-header">
            <span>
                <i class="oi oi-list"></i> Tareas <!-- Ícono de lista -->
                <a class="btn btn-sm btn-success float-end" href="/tareas/create">
                    <i class="fas fa-plus"></i> Nueva Tarea <!-- Botón para agregar una nueva tarea -->
                </a>
            </span>
        </div>

        <div class="card-body">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Título</th>
                        <th>Descripción</th>
                        <th>Fecha Límite</th>
                        <th>Proyecto</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @if (tareas.Any()) // Si existen tareas, las muestra
                    {
                        @foreach (var tarea in tareas)
                        {
                            <tr>
                                <td>@tarea.Titulo</td>
                                <td>@tarea.Descripcion</td>
                                <td>@tarea.FechaLimite.ToShortDateString()</td>
                                <td>@(tarea.ProyectoId != null ? proyectos.FirstOrDefault(p => p.Id == tarea.ProyectoId)?.Nombre : "N/A")</td>
                                <td>
                                    <a class="btn btn-secondary btn-sm" @onclick="@(() => EditTarea(tarea.Id))">
                                        <i class="fas fa-edit"></i> Editar <!-- Botón para editar tarea -->
                                    </a>
                                    <button class="btn btn-danger btn-sm" @onclick="@(() => DeleteTarea(tarea.Id))">
                                        <i class="fas fa-trash"></i> Borrar <!-- Botón para eliminar tarea -->
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="5" class="text-center">No hay tareas disponibles.</td> <!-- Mensaje cuando no hay tareas -->
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    public List<TareaDto>? tareas { get; set; } // Lista de tareas a mostrar
    private List<Proyecto> proyectos = new(); // Lista de proyectos disponibles

    // Se ejecuta cuando el componente es inicializado
    protected async override Task OnInitializedAsync()
    {
        // Obtiene la lista de tareas desde la API
        var responseHttp = await repository.Get<List<TareaDto>>("/api/tareas");

        if (responseHttp.Error)  // Si hay error al obtener las tareas
        {
            var mensajeError = await responseHttp.GetErrorMessage();
            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error); // Muestra mensaje de error
        }
        else // Si la respuesta fue exitosa
        {
            tareas = responseHttp.Response!; // Asigna las tareas a la lista

            // Obtiene la lista de proyectos desde la API
            var proyectosResponse = await repository.Get<List<Proyecto>>("/api/proyectos");
            if (!proyectosResponse.Error)
            {
                proyectos = proyectosResponse.Response; // Asigna los proyectos a la lista
            }
        }
    }

    // Método para redirigir al usuario a la página de edición de una tarea
    private void EditTarea(int id)
    {
        NavigationManager.NavigateTo($"/tareas/edit/{id}"); // Redirige a la página de edición con el id de la tarea
    }

    // Método para borrar una tarea
    private async Task DeleteTarea(int id)
    {
        var respuesta = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Está seguro de que desea borrar esta tarea?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí, borrar",
                CancelButtonText = "No, cancelar"
            });

        if (respuesta.IsConfirmed) // Si el usuario confirma la acción
        {
            // Realiza la solicitud para borrar la tarea
            var response = await repository.Delete($"/api/tareas/{id}");

            if (response.Error) // Si hay error al borrar la tarea
            {
                var mensajeError = await response.GetErrorMessage();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
            else // Si la tarea fue borrada exitosamente
            {
                await swal.FireAsync("Éxito", "Tarea borrada exitosamente.", SweetAlertIcon.Success);
                await OnInitializedAsync(); // Vuelve a cargar las tareas
            }
        }
    }
}
