@page "/tareas"
@using Pomodoro.Shared.Dtos
@using Pomodoro.WEB.Repositories
@inject IRepository repository
@inject SweetAlertService swal
@inject NavigationManager NavigationManager

@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Roles = "Admin")]

<h3>Lista de Tareas</h3>

@if (tareas == null)
{
    <div class="spinner" />
}
else
{
    <GenericList MyList="tareas">
        <Body>
            <div class="card">
                <div class="card-header">
                    <span>
                        <i class="oi oi-list"></i> Tareas
                        <a class="btn btn-sm btn-success float-end" href="/tareas/create">
                            <i class="oi oi-plus"></i> Nueva Tarea
                        </a>
                    </span>
                </div>

                <div class="card-body">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Título</th>
                                <th>Descripción</th>
                                <th>Fecha Límite</th>
                                <th>Proyecto</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (tareas.Any())
                            {
                                @foreach (var tarea in tareas)
                                {
                                    <tr>
                                        <td>@tarea.Titulo</td>
                                        <td>@tarea.Descripcion</td>
                                        <td>@tarea.FechaLimite.ToShortDateString()</td>
                                        <td>@(tarea.ProyectoId != null ? proyectos.FirstOrDefault(p => p.Id == tarea.ProyectoId)?.Nombre : "N/A")</td>
                                        <td>
                                            <a class="btn btn-secondary btn-sm" @onclick="@(() => EditTarea(tarea.Id))">
                                                <i class="oi oi-pencil"></i> Editar
                                            </a>
                                            <button class="btn btn-danger btn-sm" @onclick="@(() => DeleteTarea(tarea.Id))">
                                                <i class="oi oi-trash"></i> Borrar
                                            </button>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="5" class="text-center">No hay tareas disponibles.</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </Body>
    </GenericList>
}

@code {
    public List<TareaDto>? tareas { get; set; }
    private List<Proyecto> proyectos = new();

    protected async override Task OnInitializedAsync()
    {
        var responseHttp = await repository.Get<List<TareaDto>>("/api/tareas");

        if (responseHttp.Error)
        {
            var mensajeError = await responseHttp.GetErrorMessage();
            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
        {
            tareas = responseHttp.Response!;

            var proyectosResponse = await repository.Get<List<Proyecto>>("/api/proyectos");
            if (!proyectosResponse.Error)
            {
                proyectos = proyectosResponse.Response;
            }
        }
    }

    private void EditTarea(int id)
    {
        NavigationManager.NavigateTo($"/tareas/edit/{id}");
    }

    private async Task DeleteTarea(int id)
    {
        var respuesta = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Está seguro de que desea borrar esta tarea?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí, borrar",
                CancelButtonText = "No, cancelar"
            });

        if (respuesta.IsConfirmed)
        {
            var response = await repository.Delete($"/api/tareas/{id}");

            if (response.Error)
            {
                var mensajeError = await response.GetErrorMessage();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
            else
            {
                await swal.FireAsync("Éxito", "Tarea borrada exitosamente.", SweetAlertIcon.Success);
                await OnInitializedAsync();
            }
        }
    }
}
