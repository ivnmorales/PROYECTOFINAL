@using Pomodoro.Shared.Entities
@using Pomodoro.Shared.Dtos
@using Microsoft.AspNetCore.Components.Forms
@inject IRepository repository
@inject SweetAlertService swal
@inject NavigationManager navigationManager

<EditForm EditContext="editContext" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="titulo">Título</label>
        <InputText id="titulo" class="form-control" @bind-Value="Tarea.Titulo" />
    </div>

    <div class="form-group">
        <label for="descripcion">Descripción</label>
        <InputTextArea id="descripcion" class="form-control" @bind-Value="Tarea.Descripcion" />
    </div>

    <div class="form-group">
        <label for="fechaLimite">Fecha Límite</label>
        <InputDate id="fechaLimite" class="form-control" @bind-Value="Tarea.FechaLimite" />
    </div>

    <div class="form-group">
        <label for="proyectos">Seleccionar Proyecto</label>
        <select id="proyectos" class="form-control" @bind="selectedProyectoId">
            <option value="">Seleccione un proyecto</option>
            @foreach (var proyecto in proyectos)
            {
                <option value="@proyecto.Id">@proyecto.Nombre</option>
            }
        </select>
    </div>

    <button type="submit" class="btn btn-primary" disabled="@isSubmitting">Guardar</button>
    <button type="button" class="btn btn-secondary" @onclick="ReturnAction">Cancelar</button>
</EditForm>

@code {
    [Parameter] public EventCallback OnFormSubmit { get; set; } // Evento para manejar el submit del formulario
    [Parameter] public Action ReturnAction { get; set; } // Acción para gestionar la acción de cancelar

    public CrearTareaDto Tarea { get; set; } = new CrearTareaDto(); // Objeto de la tarea a crear
    private EditContext editContext; // Contexto de edición para validaciones
    private bool isSubmitting = false; // Indicador de si el formulario está siendo enviado

    private List<Proyecto> proyectos = new List<Proyecto>();  // Lista de proyectos disponibles
    private int? selectedProyectoId;  // Proyecto seleccionado
    // Se ejecuta cuando el componente es inicializado
    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(Tarea); // Inicializa el contexto de edición con la tarea

        // Obtiene la lista de proyectos desde la API
        var proyectosResponse = await repository.Get<List<Proyecto>>("api/proyectos");
        if (!proyectosResponse.Error) // Si no hay error en la respuesta
        
        {
            proyectos = proyectosResponse.Response; // Asigna la lista de proyectos
        }
    }
    // Método que se ejecuta cuando el formulario se envía y es válido
    private async Task HandleValidSubmit()
    {
        // Si ya se está enviando, no se procesa otra solicitu
        if (isSubmitting)
            return;

        isSubmitting = true;

        Tarea.ProyectoId = selectedProyectoId; // Asigna el proyecto seleccionado a la tarea
       // Envía los datos de la tarea a la API
        var response = await repository.Post("/api/tareas", Tarea);

        if (response.Error)
        {
            var errorMsg = await response.GetErrorMessage();
            await swal.FireAsync("Error", errorMsg, SweetAlertIcon.Error);
            isSubmitting = false; // Permite que se vuelva a enviar el formulario en caso de error
        }
        else
        {
            await swal.FireAsync("Éxito", "Tarea guardada exitosamente.", SweetAlertIcon.Success);
            await OnFormSubmit.InvokeAsync(); // Llama al evento para realizar cualquier acción adicional (ej. redirección)
        }
    }
}