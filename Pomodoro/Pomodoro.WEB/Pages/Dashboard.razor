@page "/dashboard"
@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<div class="dashboard-container">
    <AuthorizeView>
        <Authorized>
            <div class="pomodoro-timer-container">
                <div class="timer">
                    <h2>Tiempo Restante</h2>
                    <div class="clock">
                        <span>@FormattedTime</span>
                    </div>
                    <div class="controls">
                        <button class="btn btn-primary" @onclick="StartStopTimer">@timerButtonText</button>
                        <button class="btn btn-secondary" @onclick="ResetTimer">Reset</button>
                    </div>
                </div>
            </div>
        </Authorized>
        <NotAuthorized>
            <div class="not-authorized-container text-center">
                <div class="alert alert-danger">
                    <h4>No autorizado</h4>
                    <p>Debes estar registrado o iniciar sesión para acceder a esta página.</p>
                </div>
                <div class="mt-3">
                    <button class="btn btn-primary me-2" @onclick="NavigateToLogin">Iniciar Sesión</button>
                    <button class="btn btn-secondary" @onclick="NavigateToRegister">Registrarse</button>
                </div>
                <div class="mt-4">
                    <p>¡Únete ahora a nuestra comunidad y empieza a organizar tus proyectos con FocusFlow! 🎯</p>
                </div>
            </div>
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    private int timeLeft = 25 * 60; // 25 minutos en segundos
    private bool isRunning = false;
    private string timerButtonText = "Start";
    private System.Timers.Timer? timer;

    private string FormattedTime => $"{timeLeft / 60:D2}:{timeLeft % 60:D2}";

    private void StartStopTimer()
    {
        if (isRunning)
        {
            timer?.Stop();
            timerButtonText = "Start";
        }
        else
        {
            StartTimer();
            timerButtonText = "Pause";
        }
        isRunning = !isRunning;
    }

    private void StartTimer()
    {
        timer = new System.Timers.Timer(1000);
        timer.Elapsed += (sender, e) =>
        {
            if (timeLeft > 0)
            {
                timeLeft--;
                InvokeAsync(StateHasChanged); // Actualiza la interfaz
            }
            else
            {
                timer?.Stop();
                isRunning = false;
                timerButtonText = "Start";
            }
        };
        timer.Start();
    }

    private void ResetTimer()
    {
        timeLeft = 25 * 60;
        if (isRunning)
        {
            timer?.Stop();
            StartTimer(); // Reinicia el temporizador si estaba corriendo
        }
        timerButtonText = "Start";
    }

    private void NavigateToLogin()
    {
        NavigationManager.NavigateTo("/login"); // Ruta de la página de inicio de sesión
    }

    private void NavigateToRegister()
    {
        NavigationManager.NavigateTo("/register"); // Ruta de la página de registro
    }
}
