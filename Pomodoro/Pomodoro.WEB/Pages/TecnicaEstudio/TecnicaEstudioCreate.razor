@page "/tecnicas-estudio/create"
@using Pomodoro.Shared.Dtos
@using Pomodoro.Shared.Entities

@inject NavigationManager navigationManager
@inject SweetAlertService swal
@inject IRepository repository

@using Microsoft.AspNetCore.Authorization;
@*// Restringe el acceso a esta página a los usuarios con el rol "Admin"*@
@attribute [Authorize(Roles = "Admin")]

<h3>Crear Nueva Técnica de Estudio</h3>

<EditForm Model="@tecnicaEstudioDto" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="nombre" class="form-label">Nombre</label>
        <InputText id="nombre" class="form-control" @bind-Value="tecnicaEstudioDto.Nombre" />
    </div>

    <div class="mb-3">
        <label for="descripcion" class="form-label">Descripción</label>
        <InputTextArea id="descripcion" class="form-control" @bind-Value="tecnicaEstudioDto.Descripcion" />
    </div>

    <div class="mb-3">
        <label for="beneficios" class="form-label">Beneficios</label>
        <InputTextArea id="beneficios" class="form-control" @bind-Value="tecnicaEstudioDto.Beneficios" />
    </div>

    <button type="submit" class="btn btn-primary">Crear Técnica de Estudio</button>

    <!-- Cancel Button -->
    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancelar</button>
</EditForm>

@code {
    private CrearTecnicaEstudioDto tecnicaEstudioDto = new CrearTecnicaEstudioDto(); // Objeto para almacenar los datos de la nueva técnica de estudio
    // Método para manejar el envío del formulario cuando es válido
    private async Task HandleValidSubmit()
    {
        // Realiza una solicitud POST a la API para crear la nueva técnica de estudio
        var response = await repository.Post("/api/tecnicas-estudio", tecnicaEstudioDto);
        if (response.Error)
        {
            var mensajeError = await response.GetErrorMessage();// Obtiene el mensaje de error
            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);  // Muestra un mensaje de error con SweetAlert
        }
        else // Si la técnica se creó con éxito
        {
            await swal.FireAsync("Éxito", "La técnica de estudio ha sido creada.", SweetAlertIcon.Success);
            navigationManager.NavigateTo("/tecnicas-estudio");  // Redirige al usuario a la lista de técnicas de estudio
        }
    }

    // Método para cancelar la operación y regresar a la lista de técnicas de estudio
    private async Task Cancel()
    {
        // Muestra una alerta de confirmación antes de cancelar
        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Estás seguro?",
                Text = "Si cancelas, se perderán los cambios no guardados.",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí, cancelar",
                CancelButtonText = "No, volver"
            });

        if (result.IsConfirmed)
        {
            navigationManager.NavigateTo("/tecnicas-estudio"); // Redirige a la lista de técnicas de estudio
        }
    }
}
