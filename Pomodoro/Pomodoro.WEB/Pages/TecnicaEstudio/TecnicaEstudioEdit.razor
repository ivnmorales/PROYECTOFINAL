@page "/tecnicas-estudio/edit/{id:int}"
@using Pomodoro.Shared.Entities
@using Pomodoro.WEB.Repositories
@inject IRepository repository
@inject SweetAlertService swal
@inject NavigationManager NavigationManager

@using Microsoft.AspNetCore.Authorization;
@*// Restringe el acceso a esta página solo para usuarios con el rol "Admin"*@
@attribute [Authorize(Roles = "Admin")]

<h3>Editar Técnica de Estudio</h3>

<EditForm Model="@tecnicaEstudio" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="nombre" class="form-label">Nombre</label>
        <InputText id="nombre" class="form-control" @bind-Value="tecnicaEstudio.Nombre" required />
    </div>

    <div class="mb-3">
        <label for="descripcion" class="form-label">Descripción</label>
        <InputTextArea id="descripcion" class="form-control" @bind-Value="tecnicaEstudio.Descripcion" />
    </div>

    <div class="mb-3">
        <label for="beneficios" class="form-label">Beneficios</label>
        <InputTextArea id="beneficios" class="form-control" @bind-Value="tecnicaEstudio.Beneficios" />
    </div>

    <button type="submit" class="btn btn-primary">Guardar Cambios</button>

    <!-- Cancel Button -->
    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancelar</button>
</EditForm>

@code {
    [Parameter] public int Id { get; set; } // ID de la técnica de estudio a editar
    private TecnicaEstudio tecnicaEstudio { get; set; } = new TecnicaEstudio(); // Objeto que representa la técnica de estudio a editar

    protected async override Task OnInitializedAsync()
    {
        // Obtener la técnica de estudio a editar
        var response = await repository.Get<TecnicaEstudio>($"/api/tecnicas-estudio/{Id}");
        if (response.Error)
        {
            var mensajeError = await response.GetErrorMessage();
            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            NavigationManager.NavigateTo("/tecnicas-estudio");
            return;
        }
        tecnicaEstudio = response.Response;
    }
    // Método para manejar el envío del formulario cuando es válido
    private async Task HandleValidSubmit()
    {
        var response = await repository.Put($"/api/tecnicas-estudio/{Id}", tecnicaEstudio);
        if (response.Error)
        {
            var mensajeError = await response.GetErrorMessage();
            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
        {
            await swal.FireAsync("Éxito", "La técnica de estudio ha sido editada.", SweetAlertIcon.Success);
            NavigationManager.NavigateTo("/tecnicas-estudio");
        }
    }

    // Método para cancelar la operación y volver a la lista de técnicas de estudio
    private async Task Cancel()
    {
        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "¿Estás seguro?",
                Text = "Si cancelas, se perderán los cambios no guardados.",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí, cancelar",
                CancelButtonText = "No, volver"
            });

        if (result.IsConfirmed)  // Si el usuario confirma la cancelación
        {
            NavigationManager.NavigateTo("/tecnicas-estudio"); // Redirige a la lista de técnicas de estudio
        }
    }
}
