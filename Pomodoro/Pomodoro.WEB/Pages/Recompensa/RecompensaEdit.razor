@page "/recompensas/edit/{id:int}"
@using Pomodoro.Shared.Entities
@using Pomodoro.WEB.Repositories
@inject IRepository repository
@inject SweetAlertService swal
@inject NavigationManager NavigationManager

@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Roles = "Admin")]

<h3>Editar Recompensa</h3>

@if (Recompensa != null)
{
    <EditForm Model="@Recompensa" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label for="nombre" class="form-label">Nombre</label>
            <InputText id="nombre" class="form-control" @bind-Value="Recompensa.Nombre" />
        </div>

        <div class="mb-3">
            <label for="descripcion" class="form-label">Descripción</label>
            <InputTextArea id="descripcion" class="form-control" @bind-Value="Recompensa.Descripcion" />
        </div>

        @if (proyectos?.Any() == true)
        {
            <div class="mb-3">
                <label for="proyecto" class="form-label">Seleccionar Proyecto</label>
                <select id="proyecto" class="form-control" @bind="selectedProyectoId" required>
                    <option value="">Seleccione un proyecto</option>
                    @foreach (var proyecto in proyectos)
                    {
                        <option value="@proyecto.Id" selected="@proyecto.Id == Recompensa.ProyectoId">@proyecto.Nombre</option>
                    }
                </select>
            </div>
        }

        <button type="submit" class="btn btn-primary">Guardar Cambios</button>
        <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancelar</button>
    </EditForm>
}
else
{
    <p>Cargando...</p>
}

@code {
    [Parameter] public int Id { get; set; }
    private Recompensa? Recompensa { get; set; }
    private List<Proyecto> proyectos = new();
    private int selectedProyectoId;

    protected async override Task OnInitializedAsync()
    {
        var response = await repository.Get<Recompensa>($"/api/recompensas/{Id}");
        if (response.Error)
        {
            var mensajeError = await response.GetErrorMessage();
            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            NavigationManager.NavigateTo("/recompensas");
            return;
        }
        Recompensa = response.Response;

        if (Recompensa.ProyectoId.HasValue)
        {
            selectedProyectoId = Recompensa.ProyectoId.Value;
        }

        var proyectosResponse = await repository.Get<List<Proyecto>>("/api/proyectos");
        if (!proyectosResponse.Error && proyectosResponse.Response is not null)
        {
            proyectos = proyectosResponse.Response;
        }
    }

    private async Task HandleValidSubmit()
    {
        // Confirmación antes de guardar los cambios
        var confirmResult = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Está seguro de que desea guardar los cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí",
                CancelButtonText = "No"
            });

        if (confirmResult.IsConfirmed)
        {
            Recompensa.ProyectoId = selectedProyectoId;

            var response = await repository.Put($"/api/recompensas/{Id}", Recompensa);
            if (response.Error)
            {
                var mensajeError = await response.GetErrorMessage();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
            else
            {
                await swal.FireAsync("Éxito", "La recompensa ha sido editada.", SweetAlertIcon.Success);
                NavigationManager.NavigateTo("/recompensas");
            }
        }
    }

    private async Task CancelEdit()
    {
        var confirmResult = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Está seguro de que desea cancelar la operación?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí",
                CancelButtonText = "No"
            });

        if (confirmResult.IsConfirmed)
        {
            NavigationManager.NavigateTo("/recompensas");
        }
    }
}
