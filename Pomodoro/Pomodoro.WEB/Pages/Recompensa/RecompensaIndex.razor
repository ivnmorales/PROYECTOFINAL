@page "/recompensas"
@using Pomodoro.Shared.Dtos
@using Pomodoro.WEB.Repositories
@inject IRepository repository
@inject SweetAlertService swal
@inject NavigationManager NavigationManager

@using Microsoft.AspNetCore.Authorization;
@*// Requiere autenticación con rol de "Admin"*@
@attribute [Authorize(Roles = "Admin")]

<h3>Lista de Recompensas</h3>

@if (recompensas == null) // Si la lista de recompensas es nula, muestra un spinner de carga
{
    <div class="spinner" />
}
else // Si las recompensas están cargadas, muestra la tarjeta con la tabla
{
    <div class="card">
        <!-- Contenedor principal de la tarjeta -->
        <div class="card-header">
            <!-- Cabecera de la tarjeta -->
            <span>
                <i class="oi oi-trophy"></i> Recompensas <!-- Título -->
                <a class="btn btn-sm btn-success float-end" href="/recompensas/create">
                    <!-- Botón para crear nueva recompensa -->
                    <i class="fas fa-plus"></i> Nueva Recompensa
                </a>
            </span>
        </div>

        <div class="card-body">
            <!-- Cuerpo de la tarjeta, donde va la tabla -->
            <table class="table table-striped">
                <!-- Tabla con estilo stripe -->
                <thead>
                    <tr>
                        <th>Nombre</th>
                        <th>Descripción</th>
                        <th>Proyecto</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @if (recompensas.Any()) // Si hay recompensas, itera sobre ellas
                    {
                        @foreach (var recompensa in recompensas)
                        {
                            <tr>
                                <td>@recompensa.Nombre</td> <!-- Muestra el nombre de la recompensa -->
                                <td>@recompensa.Descripcion</td> <!-- Muestra la descripción -->
                                <td>@(recompensa.ProyectoId != null ? proyectos.FirstOrDefault(p => p.Id == recompensa.ProyectoId)?.Nombre : "N/A")</td> <!-- Muestra el nombre del proyecto asociado -->
                                <td>
                                    <!-- Botón para editar la recompensa -->
                                    <a class="btn btn-secondary btn-sm" @onclick="@(() => EditRecompensa(recompensa.Id))">
                                        <i class="fas fa-edit"></i> Editar
                                    </a>
                                    <!-- Botón para borrar la recompensa -->
                                    <button class="btn btn-danger btn-sm" @onclick="@(() => DeleteRecompensa(recompensa.Id))">
                                        <i class="fas fa-trash"></i> Borrar
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                    else // Si no hay recompensas, muestra un mensaje indicando que no hay datos
                    {
                        <tr>
                            <td colspan="4" class="text-center">No hay recompensas disponibles.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    public List<RecompensaDto>? recompensas { get; set; }  // Lista de recompensas a mostrar
    private List<Proyecto> proyectos = new(); // Lista de proyectos para asociar a las recompensas

    // Método que se ejecuta cuando el componente se inicializa
    protected async override Task OnInitializedAsync()
    {
        // Realiza una solicitud GET para obtener las recompensas
        var responseHttp = await repository.Get<List<RecompensaDto>>("/api/recompensas");

        if (responseHttp.Error) // Si hay un error en la solicitud
        {
            // Muestra un mensaje de error utilizando SweetAlert
            var mensajeError = await responseHttp.GetErrorMessage();
            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else // Si la respuesta es correcta
        {
            recompensas = responseHttp.Response!; // Asigna las recompensas obtenidas

            // Cargar los proyectos completos si aún no están cargados
            var proyectosResponse = await repository.Get<List<Proyecto>>("/api/proyectos");
            if (!proyectosResponse.Error)
            {
                proyectos = proyectosResponse.Response; // Asigna los proyectos obtenidos
            }
        }
    }

    // Método para redirigir al usuario a la página de edición de la recompensa
    private void EditRecompensa(int id)
    {
        NavigationManager.NavigateTo($"/recompensas/edit/{id}");
    }

    // Método para eliminar una recompensa
    private async Task DeleteRecompensa(int id)
    {
        // Muestra una alerta de confirmación antes de eliminar
        var respuesta = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Está seguro de que desea borrar esta recompensa?", // Mensaje de la alerta
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí, borrar",
                CancelButtonText = "No, cancelar"
            });

        // Si el usuario confirma la eliminación
        if (respuesta.IsConfirmed)
        {
            // Realiza la solicitud DELETE
            var response = await repository.Delete($"/api/recompensas/{id}");

            if (response.Error) // Si ocurre un error en la eliminación
            {
                var mensajeError = await response.GetErrorMessage();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error); // Muestra un mensaje de error
            }
            else // Si la eliminación es exitosa
            {
                await swal.FireAsync("Éxito", "Recompensa borrada exitosamente.", SweetAlertIcon.Success); // Muestra un mensaje de éxito
                await OnInitializedAsync(); // Refresca la lista de recompensas
            }
        }
    }
}
