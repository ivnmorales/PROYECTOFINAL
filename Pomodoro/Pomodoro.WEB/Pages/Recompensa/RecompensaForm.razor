@using Pomodoro.Shared.Dtos
@using Microsoft.AspNetCore.Components.Forms
@inject IRepository repository
@inject SweetAlertService swal
@inject NavigationManager navigationManager

<EditForm EditContext="editContext" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="nombre">Nombre</label>
        <InputText id="nombre" class="form-control" @bind-Value="Recompensa.Nombre" />
    </div>

    <div class="form-group">
        <label for="descripcion">Descripción</label>
        <InputTextArea id="descripcion" class="form-control" @bind-Value="Recompensa.Descripcion" />
    </div>

    <div class="form-group">
        <label for="proyectos">Seleccionar Proyecto</label>
        <select id="proyectos" class="form-control" @bind="selectedProyectoId">
            <option value="">Seleccione un proyecto</option>
            @foreach (var proyecto in proyectos)
            {
                <option value="@proyecto.Id">@proyecto.Nombre</option>
            }
        </select>
    </div>

    <button type="submit" class="btn btn-primary" disabled="@isSubmitting">Guardar</button>
    <button type="button" class="btn btn-secondary" @onclick="ReturnAction">Cancelar</button>
</EditForm>

@code {
    [Parameter] public EventCallback OnFormSubmit { get; set; } // Callback que se invoca cuando el formulario es enviado correctamente
    [Parameter] public Action ReturnAction { get; set; } // Acción para cancelar o retornar

    public CrearRecompensaDto Recompensa { get; set; } = new CrearRecompensaDto(); // Modelo para la recompensa que se está creando
    private EditContext editContext; // Contexto de edición para el formulario
    private bool isSubmitting = false; // Indicador de si el formulario está siendo enviado

    private List<Proyecto> proyectos = new List<Proyecto>();  // Lista de proyectos disponibles para seleccionar
    private int? selectedProyectoId;  // ID del proyecto seleccionado
   // Método que se ejecuta cuando el componente se inicializa
    protected override async Task OnInitializedAsync()
    {
        // Inicializa el contexto de edición con el modelo de recompensa
        editContext = new EditContext(Recompensa);
        // Realiza una solicitud para obtener los proyectos disponibles
        var proyectosResponse = await repository.Get<List<Proyecto>>("api/proyectos");
        if (!proyectosResponse.Error)
        {
            proyectos = proyectosResponse.Response; // Asigna la lista de proyectos a la variable
        }
    }
    // Método que se ejecuta cuando el formulario es enviado (si los datos son válidos)
    private async Task HandleValidSubmit()
    {
        // Si el formulario ya está siendo enviado, previene el envío múltiple
        if (isSubmitting)
            return;

        isSubmitting = true;  // Marca como enviando

        Recompensa.ProyectoId = selectedProyectoId;

        var response = await repository.Post("/api/recompensas", Recompensa);

        if (response.Error)
        {
            // Si hay un error en la solicitud, muestra un mensaje de error y permite reintentar
            var errorMsg = await response.GetErrorMessage();
            await swal.FireAsync("Error", errorMsg, SweetAlertIcon.Error);
            isSubmitting = false; // Permite intentar de nuevo
        }
        else
        {
            // Si la recompensa fue guardada exitosamente, muestra un mensaje de éxito y ejecuta la acción del formulario
            await swal.FireAsync("Éxito", "Recompensa guardada exitosamente.", SweetAlertIcon.Success);
            await OnFormSubmit.InvokeAsync(); // Invoca el callback del formulario (por ejemplo, redirige o actualiza la vista)
        }
    }
}
