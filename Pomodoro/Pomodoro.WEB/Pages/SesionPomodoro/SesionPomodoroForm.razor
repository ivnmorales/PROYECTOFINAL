@using Pomodoro.Shared.Entities
@using Pomodoro.Shared.Dtos
@using Microsoft.AspNetCore.Components.Forms
@inject IRepository repository
@inject SweetAlertService swal
@inject NavigationManager navigationManager

<EditForm EditContext="editContext" OnValidSubmit="HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="duracion">Duración (en minutos)</label>
        <InputNumber id="duracion" class="form-control" @bind-Value="Sesion.Duracion" />
    </div>

    <div class="form-group">
        <label for="fechaInicio">Fecha de Inicio</label>
        <InputDate id="fechaInicio" class="form-control" @bind-Value="Sesion.FechaInicio" />
    </div>

    <div class="form-group">
        <label for="fechaFin">Fecha de Fin</label>
        <InputDate id="fechaFin" class="form-control" @bind-Value="Sesion.FechaFin" />
    </div>

    <div class="form-group">
        <label for="estado">Estado</label>
        <InputText id="estado" class="form-control" @bind-Value="Sesion.Estado" />
    </div>

    <div class="form-group">
        <label for="proyectos">Seleccionar Proyecto</label>
        <select id="proyectos" class="form-control" @bind="selectedProyectoId">
            <option value="">Seleccione un proyecto</option>
            @foreach (var proyecto in proyectos)
            {
                <option value="@proyecto.Id">@proyecto.Nombre</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label for="tareas">Seleccionar Tarea</label>
        <select id="tareas" class="form-control" @bind="selectedTareaId">
            <option value="">Seleccione una tarea</option>
            @foreach (var tarea in tareas)
            {
                <option value="@tarea.Id">@tarea.Titulo</option>
            }
        </select>
    </div>

    <button type="submit" class="btn btn-primary" disabled="@isSubmitting">Guardar</button>
    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancelar</button>
</EditForm>

@code {
    [Parameter] public EventCallback OnFormSubmit { get; set; } //Evento que se ejecutará al enviar el formulario
   // Objeto que contiene los datos de la nueva sesión Pomodoro
    public CrearSesionPomodoroDto Sesion { get; set; } = new CrearSesionPomodoroDto();
    private EditContext editContext; //Contexto del formulario, usado para validación y seguimiento del estado
    private bool isSubmitting = false; //Indica si el formulario está siendo enviado
   // Listas para almacenar los proyectos y tareas obtenidos desde la API
    private List<Proyecto> proyectos = new List<Proyecto>();
    private List<Tarea> tareas = new List<Tarea>();

    private int? selectedProyectoId; //ID del proyecto seleccionado
    private int? selectedTareaId; //ID de la tarea seleccionada
   // Método que se ejecuta al inicializar el componente
    protected override async Task OnInitializedAsync()
    {
        editContext = new EditContext(Sesion); //Inicializa el contexto de edición para el formulario
        // Obtiene la lista de proyectos desde la API
        var proyectosResponse = await repository.Get<List<Proyecto>>("api/proyectos");
        if (!proyectosResponse.Error)
        {
            proyectos = proyectosResponse.Response; //Asigna los proyectos a la lista si la respuesta es válida
        }
        // Obtiene la lista de tareas desde la API
        var tareasResponse = await repository.Get<List<Tarea>>("api/tareas");
        if (!tareasResponse.Error)
        {
            tareas = tareasResponse.Response; //Asigna las tareas a la lista si la respuesta es válida
        }
    }
    // Método que se ejecuta cuando se envía el formulario de manera válida
    private async Task HandleValidSubmit()
    {
        if (isSubmitting) //Si ya se está enviando el formulario, no hacer nada
            return;

        isSubmitting = true;
        // Asigna los IDs de proyecto y tarea seleccionados al objeto de sesión
        Sesion.ProyectoId = selectedProyectoId;
        Sesion.TareaId = selectedTareaId;
        // Enviar los datos del formulario a la API para guardar la nueva sesión Pomodoro
        var response = await repository.Post("/api/sesionesPomodoro", Sesion);

        if (response.Error) //Si hubo un error al guardar
        {
            var errorMsg = await response.GetErrorMessage();
            await swal.FireAsync("Error", errorMsg, SweetAlertIcon.Error);
            isSubmitting = false; //Permite que el usuario intente nuevamente
        }
        else
        {
            await swal.FireAsync("Éxito", "Sesión Pomodoro guardada exitosamente.", SweetAlertIcon.Success);
            await OnFormSubmit.InvokeAsync();// llama al evento de formulario enviado para ejecutar cualquier acción adicional
        }
    }

    private async Task Cancel()
    {
        // Muestra ventana emergente al cancelar
        await swal.FireAsync("Operación Cancelada", "No se guardaron cambios.", SweetAlertIcon.Warning);

        // Redirige a la lista de sesiones Pomodoro después de la alerta
        navigationManager.NavigateTo("/sesionesPomodoro");
    }
}
