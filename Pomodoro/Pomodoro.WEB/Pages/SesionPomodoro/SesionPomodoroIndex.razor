@page "/sesionesPomodoro"
@using Pomodoro.Shared.Dtos
@using Pomodoro.WEB.Repositories
@inject IRepository repository
@inject SweetAlertService swal
@inject NavigationManager NavigationManager

@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Roles = "Admin")]

<h3>Lista de Sesiones Pomodoro</h3>

@if (sesionesPomodoro == null)
{
    <div class="spinner" />
}
else
{
    <GenericList MyList="sesionesPomodoro">
        <Body>
            <div class="card">
                <div class="card-header">
                    <span>
                        <i class="oi oi-clock"></i> Sesiones Pomodoro
                        <a class="btn btn-sm btn-success float-end" href="/sesionesPomodoro/create">
                            <i class="oi oi-plus"></i> Nueva Sesión
                        </a>
                    </span>
                </div>

                <div class="card-body">
                    <table class="table table-striped">
                        <thead>
                            <tr>
                                <th>Duración (min)</th>
                                <th>Fecha de Inicio</th>
                                <th>Fecha de Fin</th>
                                <th>Estado</th>
                                <th>Proyecto</th>
                                <th>Tarea</th>
                                <th>Acciones</th>
                            </tr>
                        </thead>
                        <tbody>
                            @if (sesionesPomodoro.Any())
                            {
                                @foreach (var sesion in sesionesPomodoro)
                                {
                                    <tr>
                                        <td>@sesion.Duracion</td>
                                        <td>@sesion.FechaInicio.ToShortDateString()</td>
                                        <td>@sesion.FechaFin.ToShortDateString()</td>
                                        <td>@sesion.Estado</td>
                                        <td>@(sesion.ProyectoId != null ? proyectos.FirstOrDefault(p => p.Id == sesion.ProyectoId)?.Nombre : "N/A")</td>
                                        <td>@(sesion.TareaId != null ? tareas.FirstOrDefault(t => t.Id == sesion.TareaId)?.Titulo : "N/A")</td>
                                        <td>
                                            <a class="btn btn-secondary btn-sm" @onclick="@(() => EditSesionPomodoro(sesion.Id))">
                                                <i class="oi oi-pencil"></i> Editar
                                            </a>
                                            <button class="btn btn-danger btn-sm" @onclick="@(() => DeleteSesionPomodoro(sesion.Id))">
                                                <i class="oi oi-trash"></i> Borrar
                                            </button>
                                        </td>
                                    </tr>
                                }
                            }
                            else
                            {
                                <tr>
                                    <td colspan="7" class="text-center">No hay sesiones Pomodoro disponibles.</td>
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </Body>
    </GenericList>
}

@code {
    public List<SesionPomodoroDto>? sesionesPomodoro { get; set; }
    private List<Proyecto> proyectos = new();
    private List<Tarea> tareas = new();

    protected async override Task OnInitializedAsync()
    {
        var responseHttp = await repository.Get<List<SesionPomodoroDto>>("/api/sesionesPomodoro");

        if (responseHttp.Error)
        {
            var mensajeError = await responseHttp.GetErrorMessage();
            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
        {
            sesionesPomodoro = responseHttp.Response!;

            // Cargar los proyectos y tareas completos si aún no están cargados
            var proyectosResponse = await repository.Get<List<Proyecto>>("/api/proyectos");
            if (!proyectosResponse.Error)
            {
                proyectos = proyectosResponse.Response;
            }

            var tareasResponse = await repository.Get<List<Tarea>>("/api/tareas");
            if (!tareasResponse.Error)
            {
                tareas = tareasResponse.Response;
            }
        }
    }

    private void EditSesionPomodoro(int id)
    {
        NavigationManager.NavigateTo($"/sesionesPomodoro/edit/{id}");
    }

    private async Task DeleteSesionPomodoro(int id)
    {
        var respuesta = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Está seguro de que desea borrar esta sesión Pomodoro?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí, borrar",
                CancelButtonText = "No, cancelar"
            });

        if (respuesta.IsConfirmed)
        {
            var response = await repository.Delete($"/api/sesionesPomodoro/{id}");

            if (response.Error)
            {
                var mensajeError = await response.GetErrorMessage();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
            else
            {
                await swal.FireAsync("Éxito", "Sesión Pomodoro borrada exitosamente.", SweetAlertIcon.Success);
                await OnInitializedAsync(); // Refresca la lista de sesiones
            }
        }
    }
}
