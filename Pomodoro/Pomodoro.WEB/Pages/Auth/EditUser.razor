@page "/EditUser"

@using CurrieTechnologies.Razor.SweetAlert2;
@using Pomodoro.Shared.Entities;
@using Pomodoro.WEB.Services;
@using Pomodoro.WEB.AuthenticationProviders;
@using Pomodoro.WEB.Repositories;
@using Pomodoro.WEB.Shared;

@inject IRepository repository;
@inject SweetAlertService sweetAlertService;
@inject NavigationManager navigationManager;
@inject ILoginService loginService;

@if (user is null)
{
    <div class="spinner" />
}
else
{
    <EditForm Model="user" OnValidSubmit="SaveUserAsync">
        <DataAnnotationsValidator />

        <div class="card">
            <div class="card-header">
                <span>
                    <i class="oi oi-person" /> Editar Usuario
                    <a class="btn btn-sm btn-secondary float-end" href="/changePassword"><i class="oi oi-key" /> Cambiar Contraseña</a>
                    <button class="btn btn-sm btn-primary float-end mx-2" type="submit"><i class="oi oi-check" /> Guardar Cambios</button>
                    <button class="btn btn-sm btn-danger float-end mx-2" type="button" @onclick="ConfirmCancel"><i class="oi oi-x" /> Cancelar</button>
                </span>
            </div>
            <div class="card-body">
                <div class="row">
                    <div class="col-6">
                        <div class="mb-3">
                            <label>Nombres:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="user.FirstName" />
                                <ValidationMessage For="@(() => user.FirstName)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Apellidos:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="user.LastName" />
                                <ValidationMessage For="@(() => user.LastName)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Documento:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="user.Document" />
                                <ValidationMessage For="@(() => user.Document)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <label>Teléfono:</label>
                            <div>
                                <InputText class="form-control" @bind-Value="user.PhoneNumber" />
                                <ValidationMessage For="@(() => user.PhoneNumber)" />
                            </div>
                        </div>
                        <div class="mb-3">
                            <InputImg Label="Foto" ImageSelected="ImageSelected" ImageURL="@imageUrl" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </EditForm>
}

@code {
    private User user;
    private string imageUrl;

    protected override async Task OnInitializedAsync()
    {
        await LoadUserAsync();

        if (!string.IsNullOrEmpty(user!.Photo))
        {
            imageUrl = user.Photo;
            user.Photo = null;
        }
    }

    private async Task LoadUserAsync()
    {
        var responseHTTP = await repository.Get<User>("/api/accounts");
        if (responseHTTP.Error)
        {
            if (responseHTTP.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
                return;
            }

            var messageError = await responseHTTP.GetErrorMessage();
            await sweetAlertService.FireAsync("Error", messageError, SweetAlertIcon.Error);
            return;
        }

        user = responseHTTP.Response;
    }

    private void ImageSelected(string imagenBase64)
    {
        user!.Photo = imagenBase64;
        imageUrl = null;
    }

    private async Task SaveUserAsync()
    {
        var responseHttp = await repository.Put<User>("/api/accounts", user!);
        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessage();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }

        await sweetAlertService.FireAsync("Éxito", "Los cambios se guardaron correctamente.", SweetAlertIcon.Success);
        navigationManager.NavigateTo("/");
    }

    private async Task ConfirmCancel()
    {
        var result = await sweetAlertService.FireAsync(new SweetAlertOptions
            {
                Title = "¿Estás seguro?",
                Text = "Perderás todos los cambios no guardados.",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí, cancelar",
                CancelButtonText = "No, volver"
            });

        if (result.IsConfirmed)
        {
            navigationManager.NavigateTo("/");
        }
    }
}
