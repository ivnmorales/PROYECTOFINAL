@page "/historial-sesiones/create"
@* Importa las clases DTO necesarias para trabajar con datos relacionados.*@
@using Pomodoro.Shared.Dtos

@* Inyecta el servicio NavigationManager para manejar la navegación entre páginas.*@

@inject NavigationManager navigationManager
@inject IRepository repository // Inyecta el servicio IRepository para realizar peticiones HTTP a la API.

@inject SweetAlertService swal // Inyecta el servicio SweetAlertService para mostrar notificaciones al usuario.

 

<h3>Crear Nuevo Historial de Sesión</h3>

<EditForm Model="nuevoHistorialSesion" OnValidSubmit="Create">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="fecha" class="form-label">Fecha</label>
        <InputDate id="fecha" class="form-control" @bind-Value="nuevoHistorialSesion.Fecha" />
    </div>

    <div class="mb-3">
        <label for="duracion" class="form-label">Duración (minutos)</label>
        <InputNumber id="duracion" class="form-control" @bind-Value="nuevoHistorialSesion.Duracion" />
    </div>

    <div class="mb-3">
        <label for="proyecto" class="form-label">Seleccionar Proyecto</label>
        <select id="proyecto" class="form-control" @bind="nuevoHistorialSesion.ProyectoId">
            <option value="">Seleccione un proyecto</option>
            @foreach (var proyecto in proyectos)
            {
                <option value="@proyecto.Id">@proyecto.Nombre</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <label for="sesionPomodoro" class="form-label">Seleccionar Sesión Pomodoro</label>
        <select id="sesionPomodoro" class="form-control" @bind="nuevoHistorialSesion.SesionId" required>
            <option value="">Seleccione una sesión Pomodoro</option>
            @foreach (var sesion in sesionesPomodoro)
            {
                <option value="@sesion.Id">@($"{sesion.Estado} - {sesion.Duracion} min")</option>
            }
        </select>
    </div>

    <button type="submit" class="btn btn-primary">Crear Historial</button>
    <button type="button" class="btn btn-secondary" @onclick="CancelCreate">Cancelar</button>
</EditForm>

@code {
    // Modelo que representa los datos del historial de sesión que se capturan en el formulario.
    private CrearHistorialSesionDto nuevoHistorialSesion = new CrearHistorialSesionDto();
    private List<Proyecto> proyectos = new();   // Lista para almacenar los proyectos cargados desde la API.
    private List<SesionPomodoro> sesionesPomodoro = new(); // Lista para almacenar las sesiones Pomodoro cargadas desde la API.

    protected async override Task OnInitializedAsync()
    {
        // Cargar la lista de proyectos
        var proyectosResponse = await repository.Get<List<Proyecto>>("/api/proyectos");
        if (!proyectosResponse.Error)
        {
            proyectos = proyectosResponse.Response;
        }

        // Cargar la lista de sesiones Pomodoro
        var sesionesResponse = await repository.Get<List<SesionPomodoro>>("/api/sesionesPomodoro");
        if (!sesionesResponse.Error)
        {
            sesionesPomodoro = sesionesResponse.Response;
        }
    }

    private async Task Create()
    {
        // Método para manejar el envío del formulario
        // Envía los datos del modelo a la API para crear un nuevo historial de sesión.
        var response = await repository.Post("/api/historialSesiones", nuevoHistorialSesion);
        if (response.Error)
        {
            // Si ocurre un error, muestra un mensaje al usuario.
            var mensajeError = await response.GetErrorMessage();
            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            return;
        }
        // Si la creación es exitosa, muestra un mensaje y redirige al listado de historiales.
        await swal.FireAsync("Éxito", "Historial de sesión creado exitosamente.", SweetAlertIcon.Success);
        navigationManager.NavigateTo("/historial-sesiones");
    }

    private async Task CancelCreate()
    {
        // Método para manejar la cancelación del formulario.
        // Muestra una alerta de confirmación al usuario.
        var confirmResult = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Está seguro de que desea cancelar la operación?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí",
                CancelButtonText = "No"
            });
        // Si el usuario confirma, redirige al listado de historiales.
        if (confirmResult.IsConfirmed)
        {
            navigationManager.NavigateTo("/historial-sesiones");
        }
    }
}
