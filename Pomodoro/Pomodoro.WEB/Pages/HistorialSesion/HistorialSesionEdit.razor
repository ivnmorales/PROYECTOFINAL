@page "/historial-sesiones/edit/{id:int}"
@* Importa las clases DTO necesarias para trabajar con los datos.*@
@using Pomodoro.Shared.Dtos 
@* Inyecta el servicio IRepository para realizar peticiones HTTP a la API. *@
@inject IRepository repository
@* Inyecta el servicio SweetAlertService para mostrar alertas y notificaciones al usuario.*@
@inject SweetAlertService swal
@*// Inyecta el servicio NavigationManager para manejar la navegación entre páginas.*@
@inject NavigationManager navigationManager 


<h3>Editar Historial de Sesión</h3>

<EditForm Model="historialSesion" OnValidSubmit="Update">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="fecha" class="form-label">Fecha</label>
        <InputDate id="fecha" class="form-control" @bind-Value="historialSesion.Fecha" />
    </div>

    <div class="mb-3">
        <label for="duracion" class="form-label">Duración (minutos)</label>
        <InputNumber id="duracion" class="form-control" @bind-Value="historialSesion.Duracion" />
    </div>

    <button type="submit" class="btn btn-primary">Guardar Cambios</button>
    <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancelar</button>
</EditForm>

@code {
    // Parámetro que recibe el ID del historial de sesión que se va a editar.
    [Parameter] public int Id { get; set; }
    // Modelo para los datos del historial que se van a editar.
    private ActualizarHistorialSesionDto historialSesion = new ActualizarHistorialSesionDto();

    protected async override Task OnInitializedAsync()
    {
        // Se ejecuta al inicializar el componente.
        // Obtiene los datos del historial desde la API usando el ID proporcionado.
        var response = await repository.Get<HistorialSesionDto>($"/api/historialSesiones/{Id}");
        if (response.Error)
        {
            // Si ocurre un error al obtener los datos, muestra un mensaje y redirige al listado.
            var mensajeError = await response.GetErrorMessage();
            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            navigationManager.NavigateTo("/historialsesiones");
            return;
        }
        // Si los datos se obtienen correctamente, inicializa el modelo con los valores existentes.
        var data = response.Response;
        historialSesion.Fecha = data.Fecha;
        historialSesion.Duracion = data.Duracion;
    }

    private async Task Update()
    {

        // Método para manejar la actualización del historial.
        // Envía los datos actualizados a la API.
        var response = await repository.Put($"/api/historialSesiones/{Id}", historialSesion);
        if (response.Error)
        {
            // Si ocurre un error, muestra un mensaje al usuario.
            var mensajeError = await response.GetErrorMessage();
            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            return;
        }
        // Si la actualización es exitosa, muestra un mensaje y redirige al listado de historiales.
        await swal.FireAsync("Éxito", "El historial de sesión ha sido actualizado.", SweetAlertIcon.Success);
        navigationManager.NavigateTo("/historial-sesiones");
    }

    private async Task CancelEdit()
    {
        // Método para manejar la cancelación de la edición.

        // Muestra una alerta de confirmación al usuario.
        var confirmResult = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Está seguro de que desea cancelar la operación?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí",
                CancelButtonText = "No"
            });
        // Si el usuario confirma, redirige al listado de historiales.
        if (confirmResult.IsConfirmed)
        {
            navigationManager.NavigateTo("/historial-sesiones");
        }
    }
}
