@page "/historial-sesiones/edit/{id:int}"
@using Pomodoro.Shared.Dtos

@inject IRepository repository
@inject SweetAlertService swal
@inject NavigationManager navigationManager

@using Microsoft.AspNetCore.Authorization;
@attribute [Authorize(Roles = "Admin")]

<h3>Editar Historial de Sesión</h3>

<EditForm Model="historialSesion" OnValidSubmit="Update">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <label for="fecha" class="form-label">Fecha</label>
        <InputDate id="fecha" class="form-control" @bind-Value="historialSesion.Fecha" />
    </div>

    <div class="mb-3">
        <label for="duracion" class="form-label">Duración (minutos)</label>
        <InputNumber id="duracion" class="form-control" @bind-Value="historialSesion.Duracion" />
    </div>

    <button type="submit" class="btn btn-primary">Guardar Cambios</button>
    <button type="button" class="btn btn-secondary" @onclick="CancelEdit">Cancelar</button>
</EditForm>

@code {
    [Parameter] public int Id { get; set; }
    private ActualizarHistorialSesionDto historialSesion = new ActualizarHistorialSesionDto();

    protected async override Task OnInitializedAsync()
    {
        var response = await repository.Get<HistorialSesionDto>($"/api/historialSesiones/{Id}");
        if (response.Error)
        {
            var mensajeError = await response.GetErrorMessage();
            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            navigationManager.NavigateTo("/historialsesiones");
            return;
        }

        var data = response.Response;
        historialSesion.Fecha = data.Fecha;
        historialSesion.Duracion = data.Duracion;
    }

    private async Task Update()
    {
        var response = await repository.Put($"/api/historialSesiones/{Id}", historialSesion);
        if (response.Error)
        {
            var mensajeError = await response.GetErrorMessage();
            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            return;
        }

        await swal.FireAsync("Éxito", "El historial de sesión ha sido actualizado.", SweetAlertIcon.Success);
        navigationManager.NavigateTo("/historial-sesiones");
    }

    private async Task CancelEdit()
    {
        var confirmResult = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Está seguro de que desea cancelar la operación?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí",
                CancelButtonText = "No"
            });

        if (confirmResult.IsConfirmed)
        {
            navigationManager.NavigateTo("/historial-sesiones");
        }
    }
}
