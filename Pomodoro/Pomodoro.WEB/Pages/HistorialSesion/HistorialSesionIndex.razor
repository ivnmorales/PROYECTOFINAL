@page "/historial-sesiones"
@using Pomodoro.Shared.Dtos
@using Pomodoro.Shared.Entities
@inject IRepository repository
@inject SweetAlertService swal
@inject NavigationManager navigationManager

<h3>Lista de Historiales de Sesiones</h3>

<div class="mb-3">
    <a class="btn btn-warning" href="/historialsesiones/create">Nuevo Historial</a>
</div>

@if (historialesSesiones is not null && historialesSesiones.Any())
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Fecha</th>
                <th>Duración (min)</th>
                <th>Proyecto</th>
                <th>Sesión Pomodoro</th>
                <th>Acciones</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var historial in historialesSesiones)
            {
                <tr>
                    <td>@historial.Fecha.ToShortDateString()</td>
                    <td>@historial.Duracion</td>
                    <td>@GetProyectoNombre(historial.ProyectoId)</td> <!-- Muestra el nombre del Proyecto -->
                    <td>@GetSesionEstado(historial.SesionId)</td>     <!-- Muestra el estado de la sesión Pomodoro -->
                    <td>
                        <button class="btn btn-secondary" @onclick="@(() => EditHistorialSesion(historial.Id))">Editar</button>
                        <button class="btn btn-danger" @onclick="@(() => DeleteHistorialSesion(historial.Id))">Borrar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}
else
{
    <div class="alert alert-info text-center">No hay historiales de sesiones disponibles.</div>
}

@code {
    private List<HistorialSesionDto>? historialesSesiones;
    private List<Proyecto> proyectos = new();
    private List<SesionPomodoro> sesionesPomodoro = new();

    protected override async Task OnInitializedAsync()
    {
        var response = await repository.Get<List<HistorialSesionDto>>("/api/historialSesiones");

        if (response.Error)
        {
            var mensajeError = await response.GetErrorMessage();
            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
        {
            historialesSesiones = response.Response!;

            // Obtener proyectos y sesiones Pomodoro
            var proyectosResponse = await repository.Get<List<Proyecto>>("/api/proyectos");
            if (!proyectosResponse.Error)
            {
                proyectos = proyectosResponse.Response;
            }

            var sesionesPomodoroResponse = await repository.Get<List<SesionPomodoro>>("/api/sesionesPomodoro");
            if (!sesionesPomodoroResponse.Error)
            {
                sesionesPomodoro = sesionesPomodoroResponse.Response;
            }
        }
    }

    private string GetProyectoNombre(int? proyectoId)
    {
        if (proyectoId.HasValue)
        {
            var proyecto = proyectos.FirstOrDefault(p => p.Id == proyectoId.Value);
            return proyecto?.Nombre ?? "N/A";
        }
        return "N/A";
    }

    private string GetSesionEstado(int? sesionId)
    {
        if (sesionId.HasValue)
        {
            var sesion = sesionesPomodoro.FirstOrDefault(s => s.Id == sesionId.Value);
            return sesion?.Estado ?? "N/A";
        }
        return "N/A";
    }

    private void EditHistorialSesion(int id)
    {
        navigationManager.NavigateTo($"/historialSesiones/edit/{id}");
    }

    private async Task DeleteHistorialSesion(int id)
    {
        var confirmResult = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Desea eliminar este historial de sesión?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí",
                CancelButtonText = "No"
            });

        if (confirmResult.IsConfirmed)
        {
            var response = await repository.Delete($"/api/historialSesiones/{id}");

            if (response.Error)
            {
                var mensajeError = await response.GetErrorMessage();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
            else
            {
                await swal.FireAsync("Éxito", "Historial eliminado correctamente.", SweetAlertIcon.Success);
                await OnInitializedAsync(); // Refresca la lista de sesiones
            }
        }
    }
}