@page "/proyectos"
@using Pomodoro.Shared.Entities
@using Pomodoro.WEB.Repositories
@inject IRepository repository
@inject SweetAlertService swal
@inject NavigationManager NavigationManager

@using Microsoft.AspNetCore.Authorization;
@*// Restringe el acceso a este componente solo a usuarios con el rol de "Admin"*@
@attribute [Authorize(Roles = "Admin")]

<h3>Lista de Proyectos</h3>

@if (proyectos == null) @*// Muestra un spinner mientras se cargan los datos*@
{
    <div class="spinner" />
}
else
{
    <div class="card">
        <div class="card-header">
            <span>
                <i class="oi oi-briefcase"></i> Proyectos
                <a class="btn btn-sm btn-success float-end" href="/proyectos/create">
                    <i class="fas fa-plus"></i> Nuevo Proyecto
                </a>
            </span>
        </div>

        <div class="card-body">
            <table class="table table-striped">
                <thead>
                    <tr>
                        <th>Nombre</th>
                        <th>Descripción</th>
                        <th>Fecha de Creación</th>
                        <th>Acciones</th>
                    </tr>
                </thead>
                <tbody>
                    @if (proyectos.Any())
                    {
                        @foreach (var proyecto in proyectos)
                        {
                            <tr>
                                <td>@proyecto.Nombre</td>
                                <td>@proyecto.Descripcion</td>
                                <td>@proyecto.FechaCreacion.ToShortDateString()</td>
                                <td>
                                    <!-- Botón de Editar -->
                                    <a class="btn btn-secondary btn-sm" @onclick="@(() => EditProyecto(proyecto.Id))">
                                        <i class="fas fa-edit"></i> Editar
                                    </a>
                                    <!-- Botón de Borrar -->
                                    <button class="btn btn-danger btn-sm" @onclick="@(() => DeleteProyecto(proyecto.Id))">
                                        <i class="fas fa-trash"></i> Borrar
                                    </button>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="4" class="text-center">No hay proyectos disponibles.</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>
}

@code {
    public List<Proyecto>? proyectos { get; set; } // Lista de proyectos cargados desde la API
                                                   // Método que se ejecuta al inicializar el componente
    protected async override Task OnInitializedAsync()
    {
        var responseHttp = await repository.Get<List<Proyecto>>("/api/proyectos"); // Llama a la API para obtener los proyectos

        if (responseHttp.Error) // Manejo de errores en la respuesta de la API
        {
            var mensajeError = await responseHttp.GetErrorMessage();
            await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
        }
        else
        {
            proyectos = responseHttp.Response!; // Asigna los proyectos obtenidos a la propiedad
        }
    }
    // Método para redirigir al formulario de edición de un proyecto
    private void EditProyecto(int id)
    {
        NavigationManager.NavigateTo($"/proyectos/edit/{id}");
    }
    // Método para eliminar un proyecto
    private async Task DeleteProyecto(int id)
    {
        // Mostrar alerta de confirmación antes de eliminar
        var respuesta = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Está seguro de que desea borrar este proyecto?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true,
                ConfirmButtonText = "Sí, borrar",
                CancelButtonText = "No, cancelar"
            });

        if (respuesta.IsConfirmed) // Si el usuario confirma, se procede a eliminar
        {
            var response = await repository.Delete($"/api/proyectos/{id}"); // Llama a la API para eliminar el proyecto

            if (response.Error) // Manejo de errores al eliminar
            {
                var mensajeError = await response.GetErrorMessage();
                await swal.FireAsync("Error", mensajeError, SweetAlertIcon.Error);
            }
            else // Muestra un mensaje de éxito y refresca la lista de proyectos
            {
                await swal.FireAsync("Éxito", "Proyecto borrado exitosamente.", SweetAlertIcon.Success);
                await OnInitializedAsync(); // Refresca la lista de proyectos
            }
        }
    }
}
