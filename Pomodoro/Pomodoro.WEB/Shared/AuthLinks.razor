<AuthorizeView>
    <Authorized>
        <!-- Foto del usuario -->
        @if (!string.IsNullOrEmpty(photoUser))
        {
            <div class="mx-2">
                <img src="@photoUser" width="50" height="50" style="border-radius:50%" alt="User Photo" />
            </div>
        }

        <!-- Nombre del usuario -->
        <a href="EditUser" class="nav-link btn btn-link">@context.User.Identity!.Name</a>

        <!-- Enlace para cerrar sesión -->
        <a href="Logout" class="nav-link btn btn-link">Cerrar Sesión</a>
    </Authorized>
    <NotAuthorized>
        <!-- No mostrar nada cuando no está autenticado -->
    </NotAuthorized>
</AuthorizeView>

@code {
    private string? photoUser;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; } = null!;

    protected override async Task OnParametersSetAsync()
    {
        var authenticationState = await authenticationStateTask;

        // Obtiene los claims del usuario autenticado
        var claims = authenticationState.User.Claims.ToList();

        // Verifica si existe el claim "Photo" y lo asigna
        var photoClaim = claims.FirstOrDefault(x => x.Type == "Photo");
        if (photoClaim is not null)
        {
            photoUser = photoClaim.Value; // Asigna la URL de la foto al atributo
        }
    }
}
